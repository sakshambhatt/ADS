import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;
import java.util.ArrayList;

public class Solution {

	public String getStringCode(byte[] frequencyArr) {
		int ASCII_OF_A = 97;
		StringBuilder sb = new StringBuilder(52);
		for (int counter = 0; counter < 26; counter++) {
			int asciiOfCounter = ASCII_OF_A + counter;
			char charOfCounter = (char) asciiOfCounter;
			sb.append(charOfCounter);
			sb.append(Character.forDigit(frequencyArr[counter], 10));
		}
		return sb.toString();
	}

	public byte[] getFrequencyArr(char[] currWordCharArr) {
		byte[] frequencyArr = new byte[26];
		for (int counter = 0; counter < currWordCharArr.length; counter++) {
			// ascii of char - ascii of a
			int index = (int) currWordCharArr[counter] - 97;
			frequencyArr[index] += 1;
		}
		return frequencyArr;
	}

	public String[][] getGroupedStrings(String[] words) {
		
		HashMap<String, ArrayList<Integer>> wordGroups = new HashMap<>();
		for (int counter = 0; counter < words.length; counter++) {

			String currWord = words[counter];
			char[] currWordChars = currWord.toCharArray();
			byte[] frequencyArr = getFrequencyArr(currWordChars);
			String stringCode = getStringCode(frequencyArr);
			if (wordGroups.containsKey(stringCode)) {
				// add to value
				ArrayList<Integer> buffArr = wordGroups.get(stringCode);
				buffArr.add(counter);

			} else {
				// set key and value
				ArrayList<Integer> buffArr = new ArrayList<Integer>();
				buffArr.add(counter);
				wordGroups.put(stringCode, buffArr);
			}
		}
		// size of HashMap keys
		// declare 2d string array
		// create arrays and put in the 2d array
		String[][] output = new String[wordGroups.size()][1];
		
		Set keySet = wordGroups.keySet();
		System.out.println(keySet);
		
//		for(int counter1 = 0; counter1 < wordGroups.size(); counter1++) {
//			String key = (String) mapElement.getKey();
//			ArrayList<Integer> buff = wordGroups.get(key);
//			for(int counter2 = 0; counter2 < buff.size(); counter2++) {
//				output[][0];
//			}
//		}
		
		return output;
	}
}
